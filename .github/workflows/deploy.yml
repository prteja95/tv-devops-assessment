name: CI/CD Deploy to AWS ECS with HTTPS

on:
  push:
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_REPO_NAME: ${{ vars.APP_REPO_NAME }}
  APP_CLUSTER_NAME: ${{ vars.APP_CLUSTER_NAME }}
  APP_IMAGE_TAG: ${{ vars.APP_IMAGE_TAG }}
  CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
  ALB_PORT: ${{ vars.ALB_PORT }}
  DESIRED_TASKS: ${{ vars.DESIRED_TASKS }}
  ALB_ALLOWED_CIDRS: ${{ vars.ALB_ALLOWED_CIDRS }}
  SG_EGRESS_CIDRS: ${{ vars.SG_EGRESS_CIDRS }}
  ECS_CPU: ${{ vars.ECS_CPU }}
  ECS_MEMORY: ${{ vars.ECS_MEMORY }}
  LOG_RETENTION_DAYS: ${{ vars.LOG_RETENTION_DAYS }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          cache-dependency-path: "iac/package-lock.json"

      # Install CDKTF CLI
      - name: Install CDKTF CLI
        run: npm install -g cdktf-cli@latest

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      # Deploy new AWS Infrastructure
      - name: Deploy AWS Infrastructure
        run: |
          cd iac
          npm ci
          cdktf get
          echo "üöÄ Deploying fresh infrastructure..."
          cdktf deploy --auto-approve
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          TF_STATE_BUCKET: ${{ env.TF_STATE_BUCKET }}
          CUSTOM_VPC_CIDR: ${{ vars.CUSTOM_VPC_CIDR }}
          PUBLIC_SUBNET_CIDR_A: ${{ vars.PUBLIC_SUBNET_CIDR_A }}
          PUBLIC_SUBNET_CIDR_B: ${{ vars.PUBLIC_SUBNET_CIDR_B }}
          PRIVATE_SUBNET_CIDR_A: ${{ vars.PRIVATE_SUBNET_CIDR_A }}
          PRIVATE_SUBNET_CIDR_B: ${{ vars.PRIVATE_SUBNET_CIDR_B }}
          DOMAIN_NAME: ${{ env.DOMAIN_NAME }}

      # Verify ECR
      - name: Verify ECR & NAT
        run: |
          echo "‚úÖ Checking NAT gateway"
          aws ec2 describe-nat-gateways --region $AWS_REGION
          echo "‚úÖ Checking ECR repo"
          aws ecr describe-repositories --repository-names $APP_REPO_NAME --region $AWS_REGION

      # Wait for infra stabilization (ACM DNS validation + ALB)
      - name: Wait for ACM + ALB propagation
        run: sleep 180

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build Docker image
      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }} \
            ./app

      # Push Docker image
      - name: Push Docker image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }}

      # Force ECS deployment (new image)
      - name: Force ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.APP_CLUSTER_NAME }} \
            --service ${{ env.APP_CLUSTER_NAME }}-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          aws ecs wait services-stable \
            --cluster ${{ env.APP_CLUSTER_NAME }} \
            --services ${{ env.APP_CLUSTER_NAME }}-service \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ ECS service updated, waiting 2 mins for ALB routing..."
          sleep 120

      # Get HTTPS Route53 URL
      - name: Get HTTPS App URL
        id: app-url
        run: |
          echo "Fetching Route53 app URL..."
          APP_URL="https://app.${DOMAIN_NAME}"
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV
          echo "‚úÖ App URL: $APP_URL"

      # Test HTTPS endpoint
      - name: Test HTTPS health endpoint
        run: |
          echo "üîç Testing HTTPS health endpoint..."
          MAX_RETRIES=15
          RETRY_DELAY=20
          HEALTH_ENDPOINT="https://app.${DOMAIN_NAME}/health"

          for ((i=1; i<=$MAX_RETRIES; i++)); do
            echo "Attempt $i/$MAX_RETRIES: Testing $HEALTH_ENDPOINT"
            if curl -sSf --connect-timeout 10 --max-time 15 "$HEALTH_ENDPOINT"; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            echo "‚ùå Health check failed. Retrying in $RETRY_DELAY sec..."
            sleep $RETRY_DELAY
          done

          echo "‚ùå HTTPS health check failed after $MAX_RETRIES attempts"
          exit 1
