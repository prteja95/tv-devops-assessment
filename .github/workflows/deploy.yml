name: CI/CD Deploy to AWS ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_REPO_NAME: ${{ vars.APP_REPO_NAME }}
  APP_CLUSTER_NAME: ${{ vars.APP_CLUSTER_NAME }}
  APP_IMAGE_TAG: ${{ vars.APP_IMAGE_TAG }}  #  match your task definition (e.g. "v2")
  CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
  DESTROY_DELAY_MINUTES: 5  # Auto-cleanup delay

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ====== 1. CLEANUP PREVIOUS DEPLOYMENT ======
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Destroy previous deployment
        continue-on-error: true  # Skip if no stack exists
        run: |
          cd iac
          npm ci
          cdktf get
          cdktf destroy --auto-approve

      # ====== 2. INFRASTRUCTURE DEPLOYMENT ======
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install CDKTF
        run: npm install -g cdktf-cli@latest

      - name: Deploy infrastructure
        run: |
          cd iac
          npm ci
          cdktf get
          cdktf deploy --auto-approve
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # ====== 3. APPLICATION DEPLOYMENT ======
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          # Use version tag from variables (not commit SHA)
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }} \
            ./app
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }}

      - name: Force ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.APP_CLUSTER_NAME }} \
            --service ${{ env.APP_CLUSTER_NAME }}-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      # ====== 4. VERIFICATION ======
      - name: Wait for service stabilization
        run: sleep 120  # Reduced from 300s for faster feedback

      - name: Verify deployment
        run: |
          ALB_DNS=$(cd iac && terraform output -raw albDnsName)
          curl --retry 10 --retry-delay 15 http://$ALB_DNS/health

      # ====== 5. CLEANUP ======
      - name: Auto-destroy (success)
        if: success()
        run: |
          sleep $(( ${{ env.DESTROY_DELAY_MINUTES }} * 60 ))
          cd iac
          cdktf destroy --auto-approve

      - name: Auto-destroy (failure)
        if: failure()
        run: |
          cd iac
          cdktf destroy --auto-approve
