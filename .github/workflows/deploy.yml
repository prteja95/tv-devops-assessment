name: CI/CD Deploy to AWS ECS

on:
  push:
    branches:
      - main   # Trigger pipeline only on main branch

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_REPO_NAME: ${{ vars.APP_REPO_NAME }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Setup Node.js (20.11 for cdktf)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      # 4. Deploy AWS Infrastructure using CDKTF
      - name: Deploy AWS Infrastructure
        run: |
          set -x
          cd iac || { echo "FAILED: iac folder not found"; exit 1; }
          npm ci || { echo "FAILED: npm ci in iac folder"; exit 1; }
          npx cdktf get || { echo "FAILED: cdktf get"; exit 1; }
          npx cdktf synth || { echo "FAILED: cdktf synth"; exit 1; }
          npx cdktf deploy --auto-approve || { echo "FAILED: cdktf deploy"; exit 1; }

      # 5. Wait for infra (ALB, ECS cluster, NAT) to fully stabilize
      - name: Wait for infra to stabilize
        run: |
          echo "Waiting 5 minutes for ALB + ECS cluster stabilization..."
          sleep 300

      # 6. Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Build Docker image with commit SHA as version tag
      - name: Build and tag Docker image
        run: |
          set -x
          IMAGE_TAG=${GITHUB_SHA::7}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:$IMAGE_TAG ./app

      # 8. Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          set -x
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${IMAGE_TAG}

      # 9. Force ECS service to redeploy with the new image
      - name: Force new ECS deployment
        run: |
          set -x
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      # 10. Wait for ECS tasks + ALB target registration
      - name: Wait for ECS service stabilization
        run: |
          echo "Waiting couple of  minutes for ECS service stabilization..."
          sleep 500

      # 11. Fetch ALB DNS Name from Terraform Output
      - name: Get ALB DNS
        id: alb_dns
        run: |
          set -x
          ALB_DNS=$(cd iac && terraform output -raw albDnsName)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      # 12. Test ALB health endpoint
      - name: Test ALB health endpoint
        run: |
          echo "Testing health endpoint at http://${ALB_DNS}/health"
          curl --retry 10 --retry-delay 15 http://${ALB_DNS}/health || exit 1
