name: CI/CD Deploy to AWS ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  APP_REPO_NAME: ${{ vars.APP_REPO_NAME }}
  APP_CLUSTER_NAME: ${{ vars.APP_CLUSTER_NAME }}
  APP_IMAGE_TAG: ${{ vars.APP_IMAGE_TAG }}
  CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
  ALB_PORT: ${{ vars.ALB_PORT }}
  DESIRED_TASKS: ${{ vars.DESIRED_TASKS }}
  ALB_ALLOWED_CIDRS: ${{ vars.ALB_ALLOWED_CIDRS }}
  SG_EGRESS_CIDRS: ${{ vars.SG_EGRESS_CIDRS }}
  ECS_CPU: ${{ vars.ECS_CPU }}
  ECS_MEMORY: ${{ vars.ECS_MEMORY }}
  LOG_RETENTION_DAYS: ${{ vars.LOG_RETENTION_DAYS }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Clean CIDR blocks
      - name: Clean CIDR blocks
        id: clean-cidr
        run: |
          echo "CUSTOM_VPC_CIDR=${VARS_CUSTOM_VPC_CIDR//[$'\t\r\n ']}" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_CIDR_A=${VARS_PUBLIC_SUBNET_CIDR_A//[$'\t\r\n ']}" >> $GITHUB_ENV
          echo "PUBLIC_SUBNET_CIDR_B=${VARS_PUBLIC_SUBNET_CIDR_B//[$'\t\r\n ']}" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_CIDR_A=${VARS_PRIVATE_SUBNET_CIDR_A//[$'\t\r\n ']}" >> $GITHUB_ENV
          echo "PRIVATE_SUBNET_CIDR_B=${VARS_PRIVATE_SUBNET_CIDR_B//[$'\t\r\n ']}" >> $GITHUB_ENV
        env:
          VARS_CUSTOM_VPC_CIDR: ${{ vars.CUSTOM_VPC_CIDR }}
          VARS_PUBLIC_SUBNET_CIDR_A: ${{ vars.PUBLIC_SUBNET_CIDR_A }}
          VARS_PUBLIC_SUBNET_CIDR_B: ${{ vars.PUBLIC_SUBNET_CIDR_B }}
          VARS_PRIVATE_SUBNET_CIDR_A: ${{ vars.PRIVATE_SUBNET_CIDR_A }}
          VARS_PRIVATE_SUBNET_CIDR_B: ${{ vars.PRIVATE_SUBNET_CIDR_B }}

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: 'iac/package-lock.json'

      # Step 5: Install CDKTF
      - name: Install CDKTF
        run: npm install -g cdktf-cli@latest

      # Step 6: Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      # Step 7: Comprehensive cleanup and destroy
      - name: Cleanup and Destroy Existing Infrastructure
        continue-on-error: true
        run: |
          # Clean up ECR resources
          echo "Cleaning up ECR repository..."
          REPO_ARN=$(aws ecr describe-repositories --repository-names ${{ env.APP_REPO_NAME }} --query 'repositories[0].repositoryArn' --output text 2>/dev/null || echo "")
          if [ -n "$REPO_ARN" ]; then
            echo "Deleting ECR images..."
            aws ecr batch-delete-image \
              --repository-name ${{ env.APP_REPO_NAME }} \
              --image-ids "$(aws ecr list-images --repository-name ${{ env.APP_REPO_NAME }} --query 'imageIds[*]' --output json)" \
              || echo "No images to delete"
            echo "Force deleting ECR repository..."
            aws ecr delete-repository --repository-name ${{ env.APP_REPO_NAME }} --force || echo "ECR repo deletion failed"
          fi

          # Clean up CloudWatch Logs
          echo "Deleting CloudWatch Log Group..."
          aws logs delete-log-group --log-group-name /ecs/${{ env.APP_CLUSTER_NAME }} || echo "Log group not found"

          # Clean up ALB resources
          echo "Cleaning up ALB resources..."
          ALB_ARN=$(aws elbv2 describe-load-balancers --names tv-devops-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "")
          if [ -n "$ALB_ARN" ]; then
            echo "Deleting ALB..."
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB_ARN || echo "ALB deletion failed"
            aws elbv2 wait load-balancers-deleted --load-balancer-arns $ALB_ARN || echo "ALB wait failed"
          fi

          # Clean up Target Group
          TG_ARN=$(aws elbv2 describe-target-groups --names ecs-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
          if [ -n "$TG_ARN" ]; then
            echo "Deleting Target Group..."
            aws elbv2 delete-target-group --target-group-arn $TG_ARN || echo "Target Group deletion failed"
          fi

          # Destroy infrastructure with CDKTF
          echo "Destroying infrastructure with CDKTF..."
          cd iac
          npm ci
          cdktf get
          cdktf destroy --auto-approve || echo "Destroy command completed (may have failed)"
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          CUSTOM_VPC_CIDR: ${{ env.CUSTOM_VPC_CIDR }}
          PUBLIC_SUBNET_CIDR_A: ${{ env.PUBLIC_SUBNET_CIDR_A }}
          PUBLIC_SUBNET_CIDR_B: ${{ env.PUBLIC_SUBNET_CIDR_B }}
          PRIVATE_SUBNET_CIDR_A: ${{ env.PRIVATE_SUBNET_CIDR_A }}
          PRIVATE_SUBNET_CIDR_B: ${{ env.PRIVATE_SUBNET_CIDR_B }}

      # Step 8: Wait for cleanup completion
      - name: Wait for resource cleanup
        run: sleep 120

      # Step 9: Deploy AWS Infrastructure
      - name: Deploy AWS Infrastructure
        run: |
          cd iac
          npm ci
          cdktf get
          cdktf deploy --auto-approve
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          CUSTOM_VPC_CIDR: ${{ env.CUSTOM_VPC_CIDR }}
          PUBLIC_SUBNET_CIDR_A: ${{ env.PUBLIC_SUBNET_CIDR_A }}
          PUBLIC_SUBNET_CIDR_B: ${{ env.PUBLIC_SUBNET_CIDR_B }}
          PRIVATE_SUBNET_CIDR_A: ${{ env.PRIVATE_SUBNET_CIDR_A }}
          PRIVATE_SUBNET_CIDR_B: ${{ env.PRIVATE_SUBNET_CIDR_B }}

      # Step 10: Verify Network Connectivity
      - name: Verify ECR Access
        run: |
          aws ec2 describe-nat-gateways --region $AWS_REGION
          aws ecr describe-repositories --repository-names $APP_REPO_NAME --region $AWS_REGION

      # Step 11: Wait for infrastructure stabilization
      - name: Wait for infrastructure stabilization
        run: sleep 60

      # Step 12: Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 13: Build Docker image
      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }} \
            ./app

      # Step 14: Push Docker image
      - name: Push Docker image
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_REPO_NAME }}:${{ env.APP_IMAGE_TAG }}

      # Step 15: Force ECS deployment
      - name: Force ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.APP_CLUSTER_NAME }} \
            --service ${{ env.APP_CLUSTER_NAME }}-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          aws ecs wait services-stable \
            --cluster ${{ env.APP_CLUSTER_NAME }} \
            --services ${{ env.APP_CLUSTER_NAME }}-service \
            --region ${{ env.AWS_REGION }}
          sleep 120

      # Step 16: Get ALB DNS
      - name: Get ALB DNS
        id: alb-dns
        run: |
          cd iac
          terraform output -raw albDnsName > /tmp/alb_dns 2>/dev/null || \
          aws elbv2 describe-load-balancers \
            --names tv-devops-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text > /tmp/alb_dns
          echo "ALB_DNS=$(cat /tmp/alb_dns)" >> $GITHUB_ENV

      # Step 17: Test endpoint
      - name: Test ALB endpoint
        run: |
          for i in {1..10}; do
            if curl -sSf http://${ALB_DNS}/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i/10 - Waiting 30s before retry..."
            sleep 30
          done
          echo "ALB health check failed after 10 attempts"
          exit 1
